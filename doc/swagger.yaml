openapi: '3.0.0'
info:
  version: 1.0.0
  title: Vessels
  description: |
    The GFW Vessel API allows third parties to request aggregated information about vessels, such as identifiers, characteristics and tracks.
    This API requires an API key to use. The key should be included in the `Authorization` header of all requests to the API. Example: `Authorization: Bearer <token>`
servers:
  - url: https://gateway.api.dev.globalfishingwatch.org

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    ValidationError:
      type: object
      required:
        - fields
        - general
      properties:
        fields:
          type: array
          items:
            type: object
            required:
              - field
              - errors
            properties:
              field:
                type: string
              errors:
                type: array
                items:
                  type: object
                  required:
                    - code
                    - description
                  properties:
                    code:
                      type: string
                    description:
                      type: string
        general:
          type: array
          items:
            type: object
            required:
              - code
              - description
            properties:
              code:
                type: string
              description:
                type: string

    GeometryCollection:
      type: object
      description: Geojson geometry collection
      required:
        - type
        - geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometrycollection
      properties:
        type:
          type: string
          description: the geometry type
          enum:
            - Point
            - LineString
            - Polygon
            - MultiPoint
            - MultiLineString
            - MultiPolygon
        geometry:
          type: object

    Feature:
      type: object
      description: Geojson Feature
      required:
        - type
        - geometry
        - properties
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          type: string
        geometry:
          $ref: '#/components/schemas/GeometryCollection'
        properties:
          $ref: '#/components/schemas/FeatureProperties'

    FeatureProperties:
      type: object
      properties:
        segId:
          description: |
            unique identifier of the event segment
          type: string
        type:
          description: |
            type of the event that the feature represents
          type: string
          enum:
            - fishing
            - track
        coordinateProperties:
          description: |
            list of features requested in the track of each segment position,
            by default only includes times but also available courses and speeds
          type: object
          required:
            - times
          properties:
            times:
              type: array
              items:
                type: number
            courses:
              type: array
              items:
                type: number
            speed:
              type: array
              items:
                type: number

    GeojsonTrack:
      type: object
      description: Geojson Feature collection
      required:
        - type
        - features
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'

paths:
  '/tilesets/{tileset}/vessels':
    get:
      summary: |
        Searches for vessels
      tags:
        - VesselsAPI
      description: |
        Searches for a vessel given a free form query.The query will be matched against any identifiers for the vessel, and a paginated, ranked results list will be returned. This endpoint only returns vessels associated with a given tileset.
      parameters:
        - name: tileset
          in: path
          description: |
            Tileset to look the vessel from
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: |
            Search query.
          required: true
          schema:
            type: string
        - name: queryFields
          in: query
          description: |
            List of fields to match with the search query instead of the entire object property
          schema:
            type: array
            items:
              type: string
        - name: querySuggestions
          in: query
          description: |
            Includes suggested results for the given query
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: |
            Amount of search results to return. Maximum 25.
          required: false
          schema:
            type: integer
            maximum: 25
            default: 10
        - name: offset
          in: query
          description: |
            Offset into the search results, used for pagination.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  '/tilesets/{tileset}/vessels/{vesselId}':
    get:
      summary: |
        Obtains the characteristics of a single vessel
      description: |
        Obtains all the characteristics that describe a single vessel, such as its name and identifiers.
      tags:
        - VesselsAPI
      parameters:
        - name: tileset
          in: path
          description: |
            Tileset to query the vessel from
          required: true
          schema:
            type: string
        - name: vesselId
          in: path
          description: |
            Id of the vessel to get the characteristics from
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  '/datasets/{dataset}/vessels':
    get:
      summary: |
        Searches for vessels
      description: |
        Searches for a vessel given a free form query. The query will be matched against any identifiers for the vessel, and a paginated, ranked results list will be returned.
      tags:
        - VesselsAPI
      parameters:
        - name: dataset
          in: path
          description: |
            Dataset to query vessels from
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: |
            Search query.
          required: true
          schema:
            type: string
        - name: queryFields
          in: query
          description: |
            List of fields to match with the search query instead of the entire object property
          schema:
            type: array
            items:
              type: string
        - name: querySuggestions
          in: query
          description: |
            Includes suggested results for the given query
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: |
            Amount of search results to return. Maximum 25.
          required: false
          schema:
            type: integer
            maximum: 25
            default: 10
        - name: offset
          in: query
          description: |
            Offset into the search results, used for pagination.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  '/datasets/{dataset}/vessels/{vesselId}':
    get:
      summary: |
        Obtains the characteristics of a single vessel
      description: |
        Obtains all the characteristics that describe a single vessel, such as its name and identifiers.
      tags:
        - VesselsAPI
      parameters:
        - name: dataset
          in: path
          description: |
            Dataset to query the vessel from
          required: true
          schema:
            type: string
        - name: vesselId
          in: path
          description: |
            Id of the vessel to get the characteristics from
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  '/datasets/{dataset}/vessels/{vesselId}/tracks':
    get:
      summary: |
        Gets the tracks of a single vessel
      description: |
        Obtains all the tracks of a single vessel.
      tags:
        - VesselsAPI
      parameters:
        - name: dataset
          in: path
          description: |
            Name of the dataset you want to query
          required: true
          schema:
            type: string
        - name: vesselId
          in: path
          description: |
            Id of the vessel to get the tracks for
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |
            Comma-separated list of additional fields to include in the
            tracks, such as points classified as fishing, per-point speed and
            courses, etc. lonlat only applies when using format=valueArray, otherwise lat and lon are compulsorily included in GeoJSON responses.
          schema:
            type: array
            items:
              type: string
              enum:
                - lonlat
                - timestamp
                - fishing
                - speed
                - course
        - name: startDate
          in: query
          description: |
            Temporal filter for the track, will return only the paths of the track
            which happened after this moment
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: |
            Temporal filter for the track, will return only the paths of the track
            which happened before this moment
          schema:
            type: string
            format: date-time
        - name: format
          in: query
          description: |
            Specific encoding format to use for the track. Possible values lines, points or valueArray.
            valueArray: is a custom compact format, an array with all the fields serialized. The format is further explained in this issue: <a href="https://github.com/GlobalFishingWatch/gfw-eng-tasks/issues/54#issuecomment-620521038">valueArray format</a>.
            lines: Geojson with a single
            `LineString` feature containing all the points in the track
            points: Geojson with a `FeatureCollection` containing a `Point` feature for every point in the track
          schema:
            type: string
            enum:
              - lines
              - points
              - valueArray
            default: lines
        - name: wrapLongitudes
          in: query
          description: |
            When false, deviate from the geojson standard and don't wrap longitudes between [-180, 180],
            so that tracks going over the antimeridean line don't reset back to the negated longitudes.
            This should be false if you are using an atlantic-centered visualization, such as QGis, or when
            using leaflet or mapbox to render the track. See https://macwright.org/2016/09/26/the-180th-meridian.html.
          schema:
            type: boolean
            default: false
        - name: binary
          in: query
          description: |
            When true, the response is encoded in protobuffer, if false, the response is a json
          schema:
            type: boolean
            default: false
      responses:
        '200':
          content:
            application/vnd.geo+json:
              schema:
                $ref: '#/components/schemas/GeojsonTrack'
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  '/v1/vessels':
    get:
      summary: |
        List vessels
      description: |
        Lists vessels given a list of vessels id.
      tags:
        - VesselsAPI
      parameters:
        - name: datasets
          in: query
          description: |
            Dataset to query vessels from
          required: true
          schema:
            type: string
        - name: ids
          in: query
          description: |
            List of vessel id to get these vessels. The ids must be separated by comma.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Amount of search results to return. Maximum 25.
          required: false
          schema:
            type: integer
            maximum: 25
            default: 10
        - name: offset
          in: query
          description: |
            Offset into the search results, used for pagination.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  '/v1/vessels/search':
    get:
      summary: |
        Search vessels
      description: |
        Searches for a vessel given a free form query. The query will be matched against any identifiers for the vessel, and a paginated, ranked results list will be returned.
      tags:
        - VesselsAPI
      parameters:
        - name: datasets
          in: query
          description: |
            Dataset to query vessels from
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: |
            Search query.
          required: true
          schema:
            type: string
        - name: queryFields
          in: query
          description: |
            List of fields to match with the search query instead of the entire object property
          schema:
            type: array
            items:
              type: string
        - name: suggestField
          in: query
          description: |
            Includes suggested results for the given query for this property
          schema:
            type: string
            enum: [ shipname, imo, mmsi, flag ]
            default: shipname
        - name: limit
          in: query
          description: |
            Amount of search results to return. Maximum 25.
          required: false
          schema:
            type: integer
            maximum: 25
            default: 10
        - name: offset
          in: query
          description: |
            Offset into the search results, used for pagination.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  '/v1/vessels/advanced-search':
    get:
      summary: |
        Search vessels
      description: |
        Searches for a vessel given a query (SQL syntax).
      tags:
        - VesselsAPI
      parameters:
        - name: datasets
          in: query
          description: |
            Dataset to query vessels from
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: |
            Search query.
          required: false
          schema:
            type: string
          example: shipname LIKE 'GUAP%' and mmsi = '265555280'
        - name: limit
          in: query
          description: |
            Amount of search results to return. Maximum 25.
          required: false
          schema:
            type: integer
            maximum: 25
            default: 10
        - name: offset
          in: query
          description: |
            Offset into the search results, used for pagination.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  '/v1/vessels/{vesselId}':
    get:
      summary: |
        Obtains the characteristics of a single vessel
      description: |
        Obtains all the characteristics that describe a single vessel, such as its name and identifiers.
      tags:
        - VesselsAPI
      parameters:
        - name: datasets
          in: query
          description: |
            Dataset to query vessels from
          required: true
          schema:
            type: string
        - name: vesselId
          in: path
          description: |
            Id of the vessel to get the characteristics from
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  '/v1/vessels/{vesselId}/tracks':
    get:
      summary: |
        Gets the tracks of a single vessel
      description: |
        Obtains all the tracks of a single vessel.
      tags:
        - VesselsAPI
      parameters:
        - name: datasets
          in: query
          description: |
            Dataset to query vessels from
          required: true
          schema:
            type: string
        - name: vesselId
          in: path
          description: |
            Id of the vessel to get the tracks for
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |
            Comma-separated list of additional fields to include in the
            tracks, such as points classified as fishing, per-point speed and
            courses, etc. lonlat only applies when using format=valueArray, otherwise lat and lon are compulsorily included in GeoJSON responses.
          schema:
            type: array
            items:
              type: string
              enum:
                - lonlat
                - timestamp
                - fishing
                - speed
                - course
        - name: startDate
          in: query
          description: |
            Temporal filter for the track, will return only the paths of the track
            which happened after this moment
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: |
            Temporal filter for the track, will return only the paths of the track
            which happened before this moment
          schema:
            type: string
            format: date-time
        - name: format
          in: query
          description: |
            Specific encoding format to use for the track. Possible values lines, points or valueArray.
            valueArray: is a custom compact format, an array with all the fields serialized. The format is further explained in this issue: <a href="https://github.com/GlobalFishingWatch/gfw-eng-tasks/issues/54#issuecomment-620521038">valueArray format</a>.
            lines: Geojson with a single
            `LineString` feature containing all the points in the track
            points: Geojson with a `FeatureCollection` containing a `Point` feature for every point in the track
          schema:
            type: string
            enum:
              - lines
              - points
              - valueArray
            default: lines
        - name: wrapLongitudes
          in: query
          description: |
            When false, deviate from the geojson standard and don't wrap longitudes between [-180, 180],
            so that tracks going over the antimeridean line don't reset back to the negated longitudes.
            This should be false if you are using an atlantic-centered visualization, such as QGis, or when
            using leaflet or mapbox to render the track. See https://macwright.org/2016/09/26/the-180th-meridian.html.
          schema:
            type: boolean
            default: false
        - name: binary
          in: query
          description: |
            When true, the response is encoded in protobuffer, if false, the response is a json
          schema:
            type: boolean
            default: false
      responses:
        '200':
          content:
            application/vnd.geo+json:
              schema:
                $ref: '#/components/schemas/GeojsonTrack'
          description: |
            Expected response to a successful request.
        '401':
          description: Unauthorized, either the api key is invalid or expired.
        '400':
          description: Bad request. Invalid or wrong parameters were provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
